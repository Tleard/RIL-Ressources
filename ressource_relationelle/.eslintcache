[{"/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/index.js":"1","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/App.js":"2","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/ProtectedRoute.js":"3","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/auth.js":"4","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/Categories.js":"5","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/BlockedResList.js":"6","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/MyResources.js":"7","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/WarnList.js":"8","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/Navigation.js":"9","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/BlockedUserList.js":"10","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/Login.js":"11","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/UserLibrary.js":"12","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/Publication.js":"13","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/ResRepList.js":"14","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/UserRepList.js":"15","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/CategTools.js":"16","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/Home.js":"17","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/Register.js":"18","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/Category.js":"19","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/Resource.js":"20","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/Profile.js":"21","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/global.js":"22","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/userLibraryFunctions.js":"23","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/NavDrawer.js":"24","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/HomeCarousel.js":"25","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/AdminDash.js":"26"},{"size":308,"mtime":1611492277031,"results":"27","hashOfConfig":"28"},{"size":6864,"mtime":1617697036678,"results":"29","hashOfConfig":"28"},{"size":1082,"mtime":1612285704175,"results":"30","hashOfConfig":"28"},{"size":612,"mtime":1617696777525,"results":"31","hashOfConfig":"28"},{"size":2115,"mtime":1612724165324,"results":"32","hashOfConfig":"28"},{"size":4409,"mtime":1613248952170,"results":"33","hashOfConfig":"28"},{"size":4139,"mtime":1613559247313,"results":"34","hashOfConfig":"28"},{"size":4179,"mtime":1613486077383,"results":"35","hashOfConfig":"28"},{"size":4627,"mtime":1617695116751,"results":"36","hashOfConfig":"28"},{"size":5356,"mtime":1613325222955,"results":"37","hashOfConfig":"28"},{"size":4221,"mtime":1617696182251,"results":"38","hashOfConfig":"28"},{"size":3937,"mtime":1617695082039,"results":"39","hashOfConfig":"28"},{"size":4669,"mtime":1613580938496,"results":"40","hashOfConfig":"28"},{"size":5461,"mtime":1613248098130,"results":"41","hashOfConfig":"28"},{"size":6569,"mtime":1613319324919,"results":"42","hashOfConfig":"28"},{"size":6165,"mtime":1613584715699,"results":"43","hashOfConfig":"28"},{"size":9185,"mtime":1617696983193,"results":"44","hashOfConfig":"28"},{"size":7843,"mtime":1612285704179,"results":"45","hashOfConfig":"28"},{"size":12544,"mtime":1617695527456,"results":"46","hashOfConfig":"28"},{"size":17148,"mtime":1617695082039,"results":"47","hashOfConfig":"28"},{"size":16615,"mtime":1617695082283,"results":"48","hashOfConfig":"28"},{"size":69,"mtime":1612289991209,"results":"49","hashOfConfig":"28"},{"size":2832,"mtime":1613585159970,"results":"50","hashOfConfig":"28"},{"size":3390,"mtime":1617695082039,"results":"51","hashOfConfig":"28"},{"size":1588,"mtime":1613582770219,"results":"52","hashOfConfig":"28"},{"size":5410,"mtime":1613329330054,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"19mw015",{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"56"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"56"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"56"},"/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/index.js",[],["123","124"],"/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/App.js",["125"],"/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/ProtectedRoute.js",["126"],"// We make use of the library react-jwt to check if a token is still valid or not\nimport React from 'react';\nimport {Route, Redirect} from 'react-router-dom';\nimport {useJwt} from 'react-jwt';\nimport auth from './auth';\n\n// We export a functional component. We will pass Components as a props in the function, it is destructured. \nconst ProtectedRoute = ({component: Component, ...rest}) => {\n    const { decodedToken, isExpired } = useJwt(auth.getToken());\n\n    return (\n        <Route \n            {...rest} \n            render ={props => {\n                if(auth.getToken() !== 'undefined' && !isExpired) {\n                    return <Component {...props}/>;\n                } else {\n                    return ( <Redirect \n                        to={{\n                            pathname: \"login\",\n                            state: {\n                                form: props.location\n                            }\n                        }}\n                    />\n                    )\n                }\n            }}\n        />\n    );\n}\n\nexport default ProtectedRoute;\n","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/auth.js",[],"/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/Categories.js",[],"/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/BlockedResList.js",["127"],"import auth from \"../auth\";\nimport {useEffect, useState} from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport {Input, List, ListItem, ListItemText, ListSubheader, Typography} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\n\n\nfunction BlockedResList(){\n\n\n    const [blockedList, setBlockedList] = useState([])\n    useEffect(() => {\n        const getList = async () => {\n            const listFromAPi = await fetchList();\n            setBlockedList(listFromAPi)\n        };\n        getList()\n    }, [])\n    const fetchList = async () => {\n        const res = await fetch(\n            `${global.api}/api/admin/getResBlockedList`, {\n                method: 'POST',\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-type\": \"application/json\",\n                    Authorization: `Bearer ${auth.getToken()}`\n                }\n            });\n        return await res.json()\n    }\n\n    const deblockRes = (e) => {\n        console.log(e)\n        const name = e.target.name\n\n        const playload = {\n            r : name\n        }\n        fetch(\n            `${global.api}/api/admin/deblockRes`,{\n                method : 'POST',\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-type\": \"application/json\",\n                    Authorization: `Bearer ${auth.getToken()}`\n\n                },\n                body: JSON.stringify(playload),\n            }).then((res) => {\n\n            window.location.assign(\"http://localhost:3000/blockedRes\");\n        })\n    }\n\n\n\n    const stylesContainer = {\n        marginTop: '10%',\n    }\n    const btnStyleDes = {\n        backgroundColor : 'green',\n\n        borderRadius : '0%',\n\n        width : '10rem',\n        color : \"white\",\n        boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n        fontWeight: \"500\",\n        lineHeight: \"1.75\",\n        letterSpacing: \"0.02857em\",\n\n\n\n    }\n    const btnStyleLink = {\n        backgroundColor : 'blue',\n        textAlign : 'center',\n        borderRadius : '0%',\n\n        width : '10rem',\n        color : \"white\",\n        boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n        fontWeight: \"500\",\n        lineHeight: \"1.75\",\n        letterSpacing: \"0.02857em\",\n        marginRight : \"2rem\",\n        height : '2rem',\n        paddingTop : '0.45rem'\n\n\n\n    }\n\n    const dFlexAround = {\n        display : 'flex',\n        justifyContent : 'space-around'\n    }\n\n    const dContent = {\n\n    }\n\n    console.log(blockedList)\n    if (blockedList.length === 0) {\n        return (\n            <Container style={stylesContainer}>\n                <h1> Gestion des ressources bloquées</h1>\n                <Typography variant={'p'}>\n                    Aucune ressource n'a été bloquée pour le moment\n                </Typography>\n            </Container>\n\n        )\n    } else {\n        return (\n            <Container style={stylesContainer}>\n                <h1> Gestion des ressources bloquées</h1>\n                <List subheader={<ListSubheader> Liste des utilisateurs bloqués</ListSubheader>}>\n                    {blockedList.map((l) =>\n                        <ListItem style={dFlexAround}>\n\n                            <ListItemText primary={l.title} />\n                            <Link style={btnStyleLink}\n                                  key={l.id}\n                                //   params={{ role : \"admin\" }}\n                                //to={{pathname: \"category/resource\", state: {id: resource.id}}}\n                                  to={{\n                                      pathname: \"resource\",\n                                      state: {\n                                          role: 'admin',\n                                          option : 'deblock',\n\n                                      },\n                                      hash: `${l.id}`,\n                                  }}\n                            > VOIR </Link>\n\n                            <Input type={\"submit\"} onClick={(e) => deblockRes(e)} name={l.id}  style={btnStyleDes}  value={'DEBLOQUER'}/>\n                        </ListItem>\n                    )}\n                </List>\n            </Container>\n        )\n    }\n}\n\n\nexport default BlockedResList\n","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/MyResources.js",["128","129","130","131","132","133","134","135","136","137","138"],"import React, {useEffect, useState} from \"react\";\nimport auth from \"../auth\";\nimport {Container, Input, List, ListItem, ListItemText, ListSubheader, Typography} from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport userlib from \"../userLibraryFunctions\";\nimport ShareIcon from \"@material-ui/icons/Share\";\nimport ReportIcon from \"@material-ui/icons/Report\";\nimport Moment from 'moment'\nimport {Link} from \"react-router-dom\";\nimport Picture from \"../assets/nopicture.png\";\n\nfunction MyResources() {\n    const stylesContainer = {\n        marginTop: '10%',\n    }\n    const spaceCard = {\n        marginTop : '5%',\n        marginBottom : '5%'\n    }\n    Moment.locale('fr');\n    const [res, setRes] = useState([])\n    useEffect(() => {\n        const getRes = async () => {\n            const ResFromApi = await fetchRes();\n            setRes(ResFromApi)\n        };\n        getRes()\n    }, [])\n    const fetchRes = async () => {\n        const res = await fetch(\n            `${global.api}/api/user/me`, {\n                method: 'post',\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-type\": \"application/json\",\n                    Authorization: `Bearer ${auth.getToken()}`\n                }\n            }\n        )\n        return await res.json()\n    }\n\n    function delRes(e) {\n        const name = e.target.name\n\n        const playload = {\n            r : name\n        }\n        fetch(\n            `${global.api}/api/user/delRes`,{\n                method : 'POST',\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-type\": \"application/json\",\n                    Authorization: `Bearer ${auth.getToken()}`\n\n                },\n                body: JSON.stringify(playload),\n            }).then((res) => {\n\n            window.location.assign(\"http://localhost:3000/me\");\n        })\n    }\n\n    if (res.length === 0){\n        return (\n            <Container style={stylesContainer}>\n                <h1> Gestion de vos ressources  </h1>\n                <Typography> Vous n'avez aucune ressources publiées</Typography>\n            </Container>\n        )\n    } else {\n        return (\n\n\n            <>\n            <Container style={stylesContainer}>\n                <h1> Gestion de vos ressources  </h1>\n            </Container>\n                {res.map((r) => {\n                    // To format the Date to dd/mm/YYYY\n                    const btnStyleBlock = {\n                        backgroundColor : 'red',\n\n                        borderRadius : '0%',\n\n                        width : '10rem',\n                        color : \"white\",\n                        boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n                        fontWeight: \"500\",\n                        lineHeight: \"1.75\",\n                        letterSpacing: \"0.02857em\",\n                        marginLeft: \"2rem\",\n\n                    }\n                    return (\n                        <Card variant=\"outlined\" style={spaceCard}>\n                            <CardHeader\n                                key={r.id}\n                                title={r.title}\n                                subheader={`${r.author.username} - date de publication: ${Moment(r.createdAt).format('L')}`}\n                            />\n                            <CardContent>{r.description}</CardContent>\n                            <CardActions style={{ justifyContent: \"flex-end\" }}>\n                                <Input name={r.id} type={\"submit\"} onClick={(e) => delRes(e)}  style={btnStyleBlock}  value={'SUPPRIMER'}/>\n                            </CardActions>\n                        </Card>\n                    );\n                })}\n\n            </>\n        )}\n}\nexport default MyResources","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/WarnList.js",["139","140","141","142"],"import React, {useEffect, useState} from \"react\";\nimport auth from \"../auth\";\nimport Container from \"@material-ui/core/Container\";\nimport {Input, List, ListItem, ListItemText, ListSubheader, Typography} from \"@material-ui/core\";\nimport {Link} from 'react-router-dom'\nimport Moment from 'moment'\nimport CardActions from \"@material-ui/core/CardActions\";\n\nfunction WarnList () {\n    Moment.locale('fr');\n    const [warnList, setWarnList] = useState([])\n    useEffect(\n        () => {\n            const getList = async () => {\n                const listFromApi = await fetchList();\n                setWarnList(listFromApi)\n            };\n            getList()\n        }, [])\n    const stylesContainer = {\n        marginTop: '10%',\n    }\n    const btnStyleBlock = {\n        backgroundColor : 'red',\n\n        borderRadius : '0%',\n\n        width : '10rem',\n        color : \"white\",\n        boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n        fontWeight: \"500\",\n        lineHeight: \"1.75\",\n        letterSpacing: \"0.02857em\",\n        marginLeft: \"2rem\",\n\n    }\n\n    const end = {\n        textAlign: 'end'\n    }\n    const btnStyleClose = {\n        backgroundColor : '#FFB833',\n\n        borderRadius : '0%',\n\n        width : '10rem',\n        color : \"white\",\n        boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n        fontWeight: \"500\",\n        marginLeft : \"2rem\",\n        lineHeight: \"1.75\",\n        letterSpacing: \"0.02857em\",\n\n    }\n    const btnStyleLink = {\n        backgroundColor : 'blue',\n        textAlign : 'center',\n        borderRadius : '0%',\n\n        width : '10rem',\n        color : \"white\",\n        boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n        fontWeight: \"500\",\n        lineHeight: \"1.75\",\n        letterSpacing: \"0.02857em\",\n        marginRight : \"2rem\",\n        marginLeft : \"2rem\",\n        height : '2rem',\n        paddingTop : '0.45rem'\n\n\n\n    }\n    const fetchList = async () => {\n        const res = await fetch(\n            `${global.api}/api/admin/getWarnList`, {\n                method: 'POST',\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-type\": \"application/json\",\n                    Authorization: `Bearer ${auth.getToken()}`\n                }\n            }\n        )\n        return await res.json()\n    }\n\n    const delWarn = (e) => {\n        const name = e.target.name\n\n        const playload = {\n            w : name\n        }\n        fetch(\n            `${global.api}/api/admin/delWarn`,{\n                method : 'POST',\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-type\": \"application/json\",\n                    Authorization: `Bearer ${auth.getToken()}`\n\n                },\n                body: JSON.stringify(playload),\n            }).then((res) => {\n\n            window.location.assign(\"http://localhost:3000/warnList\");\n        })\n    }\n\n    console.log(warnList);\n    if (warnList.length > 0){\n    return (\n        <Container style={stylesContainer}>\n            <h1> Gestion des avertissements</h1>\n            <List subheader={<ListSubheader> Liste des Avertissements </ListSubheader>}>\n                {warnList.map((l) =>\n                    <ListItem>\n                        <ListItemText primary={l.userWarned.username} />\n                        <ListItemText style={end} primary={\"date du signalement: \"+Moment(l.createdAt).format('L')} />\n\n                        <Input name={l.id} type={\"submit\"} onClick={(e) => delWarn(e)}  style={btnStyleBlock}  value={'SUPPRIMER'}/>\n\n\n                    </ListItem>\n\n                )}\n            </List>\n        </Container>\n    ) } else {\n        return(\n            <Container style={stylesContainer}>\n                <h1> Gestion des averissements</h1>\n                <Typography variant={'p'}>\n                    Aucun avertissement pour le moment\n                </Typography>\n            </Container>\n        )\n    }\n\n}\nexport default WarnList","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/Navigation.js",["143","144","145","146"],"import React, {useEffect, useState} from 'react';\nimport { Link } from 'react-router-dom';\nimport auth from '../auth';\nimport { withRouter } from 'react-router-dom';\nimport {getRole} from \"../App\";\nimport NavDrawer from \"./NavDrawer\"\n\n\n// Import from MaterialUI\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {getRoles} from \"@testing-library/dom\";\n\n// Import for responsive Navbar\nimport { useMediaQuery, useTheme } from '@material-ui/core'\n\nconst Navigation = (props) => {\n\n// MaterialUI logic\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }));\n\n\n  const classes = useStyles();\n\n\n// Breakpoints\nconst theme = useTheme();\n\nconst isMatch = useMediaQuery(theme.breakpoints.down('md'));\n\n\nif (props.role === 'admin') {\n      return (\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Typography component={Link} to=\"/\" variant=\"h6\" className={classes.title}>\n                Aide\n              </Typography>\n                    <Typography component={Link} to=\"/home\" variant=\"h6\" className={classes.title}>\n                Panneau d'administration\n              </Typography>\n\n\n              <Button color=\"inherit\" onClick={() => {\n                auth.loggedout(() => {\n                  console.log('callback in test');\n                    window.location.assign(\"http://localhost:3000/login\");\n                });\n              }}>Logout</Button>\n            </Toolbar>\n          </AppBar>\n      )\n    } else if (props.role === 'user') {\n  return (\n      <>\n        <AppBar position=\"static\">\n          <Toolbar>\n            {/* <IconButton\n                edge=\"start\"\n                className={classes.menuButton}\n                color=\"inherit\"\n                aria-label=\"menu\"\n              >\n                <MenuIcon />\n              </IconButton> */}\n\n            {isMatch ? (\n                <NavDrawer />\n            ) : (\n                <>\n                  <Typography\n                      color=\"secondary\"\n                      component={Link}\n                      to=\"/home\"\n                      variant=\"h6\"\n                      className={classes.title}\n                  >\n                    Accueil\n                  </Typography>\n                  <Typography\n                      color=\"secondary\"\n                      component={Link}\n                      to=\"/categories\"\n                      variant=\"h6\"\n                      className={classes.title}\n                  >\n                    Catégories\n                  </Typography>\n                  <Typography\n                      color=\"secondary\"\n                      component={Link}\n                      to=\"/publication\"\n                      variant=\"h6\"\n                      className={classes.title}\n                  >\n                    Publier\n                  </Typography>\n                  <Typography\n                      color=\"secondary\"\n                      component={Link}\n                      to=\"/userlibrary\"\n                      variant=\"h6\"\n                      className={classes.title}\n                  >\n                    Ma Bibliothèque\n                  </Typography>\n\n                  <Button\n                      variant=\"outlined\"\n                      color=\"inherit\"\n                      onClick={() => {\n                        auth.loggedout(() => {\n                          console.log(\"callback in test\");\n                          window.location.assign(\"http://localhost:3000/login\");\n                        });\n                      }}\n                  >\n                    Logout\n                  </Button>\n                </>\n            )}\n          </Toolbar>\n        </AppBar>\n      </>\n  );\n}\nelse {\n  return (\n\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon/>\n          </IconButton>\n          <Button variant=\"outlined\" color=\"inherit\" component={Link} to=\"/login\">Login</Button>\n          <Button color=\"inherit\" component={Link} to=\"/register\">S'inscrire</Button>\n        </Toolbar>\n      </AppBar>\n  )\n}\n\n}\n\n\nexport default withRouter(Navigation);\n","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/BlockedUserList.js",["147","148","149"],"import auth from \"../auth\";\nimport {useEffect, useState} from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport {Input, List, ListItem, ListItemText, ListSubheader, Typography} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\n\n\nfunction BlockedUserList(){\n    const btnStyleBlock = {\n        backgroundColor : 'red',\n\n        borderRadius : '0%',\n\n        width : '10rem',\n        color : \"white\",\n        boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n        fontWeight: \"500\",\n        lineHeight: \"1.75\",\n        letterSpacing: \"0.02857em\",\n\n    }\n    const btnStyleClose = {\n        backgroundColor : '#FFB833',\n\n        borderRadius : '0%',\n\n        width : '10rem',\n        color : \"white\",\n        boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n        fontWeight: \"500\",\n        marginLeft : \"2rem\",\n        lineHeight: \"1.75\",\n        letterSpacing: \"0.02857em\",\n\n    }\n    const btnStyleWarn = {\n        backgroundColor : 'purple',\n\n        borderRadius : '0%',\n\n        width : '10rem',\n        color : \"white\",\n        boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n        fontWeight: \"500\",\n        marginLeft : \"2rem\",\n        lineHeight: \"1.75\",\n        letterSpacing: \"0.02857em\",\n\n    }\n    const btnStyleLink = {\n        backgroundColor : 'blue',\n        textAlign : 'center',\n        borderRadius : '0%',\n\n        width : '10rem',\n        color : \"white\",\n        boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n        fontWeight: \"500\",\n        lineHeight: \"1.75\",\n        letterSpacing: \"0.02857em\",\n        marginRight : \"2rem\",\n        marginLeft : \"2rem\",\n        height : '2rem',\n        paddingTop : '0.45rem'\n\n\n\n    }\n\n    const [blockedList, setBlockedList] = useState([])\n    useEffect(() => {\n        const getList = async () => {\n            const listFromAPi = await fetchList();\n            setBlockedList(listFromAPi)\n        };\n        getList()\n    }, [])\n    const fetchList = async () => {\n        const res = await fetch(\n            `${global.api}/api/admin/getUserBlockedList`, {\n                method: 'POST',\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-type\": \"application/json\",\n                    Authorization: `Bearer ${auth.getToken()}`\n                }\n            });\n        return await res.json()\n    }\n\n    const deblockUser = (e) => {\n        const name = e.target.name\n\n        const playload = {\n            u : name\n        }\n        fetch(\n            `${global.api}/api/admin/deblockUser`,{\n                method : 'POST',\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-type\": \"application/json\",\n                    Authorization: `Bearer ${auth.getToken()}`\n\n                },\n                body: JSON.stringify(playload),\n            }).then((res) => {\n\n            window.location.assign(\"http://localhost:3000/blockedUser\");\n        })\n    }\n\n    const stylesContainer = {\n        marginTop: '10%',\n    }\n    const btnStyleDes = {\n        backgroundColor : 'green',\n\n        borderRadius : '0%',\n\n        width : '10rem',\n        color : \"white\",\n        boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n        fontWeight: \"500\",\n        lineHeight: \"1.75\",\n        letterSpacing: \"0.02857em\",\n\n\n\n    }\n\n    console.log(blockedList)\n    if (blockedList.length === 0) {\n        return (\n            <Container style={stylesContainer}>\n                <h1> Gestion des utilisateurs bloqués</h1>\n                <Typography variant={'p'}>\n                    Aucun utilisateur n'a été bloqué pour le moment\n                </Typography>\n            </Container>\n\n        )\n    } else {\n        return (\n        <Container style={stylesContainer}>\n            <h1> Gestion des utilisateurs bloqués</h1>\n            <List subheader={<ListSubheader> Liste des utilisateurs bloqués</ListSubheader>}>\n                {blockedList.map((l) =>\n                <ListItem>\n                    <ListItemText primary={l.username} />\n                    <ListItemText primary={l.email} />\n                   <Input type={\"submit\"} onClick={(e) => deblockUser(e)} name={l.id}  style={btnStyleDes}  value={'DEBLOQUER'}/>\n                    <Link style={btnStyleLink}\n                          key={l.id}\n                        //   params={{ role : \"admin\" }}\n                        //to={{pathname: \"category/resource\", state: {id: resource.id}}}\n                          to={{\n                              pathname: \"profile\",\n                              state: {\n                                  role: 'admin',\n                                  option: 'deblock',\n                                  rep : l.id\n                              },\n                              hash: `${l.id}`,\n                          }}\n                    > VOIR </Link>\n                </ListItem>\n                )}\n        </List>\n        </Container>\n        )\n    }\n}\n\n\nexport default BlockedUserList\n","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/Login.js",["150","151","152","153","154","155","156"],"/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/UserLibrary.js",["157","158","159"],"import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport auth from \"../auth\";\nimport userlib from \"../userLibraryFunctions\";\nimport moment from 'moment';\nimport 'moment/locale/fr';\n\n// MaterialUI import\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\n// MaterialUI Icon Import\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport ShareIcon from \"@material-ui/icons/Share\";\nimport ReportIcon from \"@material-ui/icons/Report\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\n// MaterialUI Lab\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\n\nfunction UserLibrary() {\n  const [libResources, setLibResources] = useState([]);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"auth_token\")) {\n      const getResource = async () => {\n        const resourceFromServer = await fetchResource();\n        setLibResources(resourceFromServer);\n      };\n\n      getResource();\n    }\n  }, []);\n\n  const fetchResource = async () => {\n    const res = await fetch(`${global.api}/api/user/getLib`, {\n      method: \"post\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${auth.getToken()}`,\n      },\n    });\n    const data = await res.json();\n\n    return data;\n  };\n\n  return (\n    <>\n      <Typography variant=\"h2\" component=\"h1\" style={{ margin: \"4% 0 4% 0\" }}>\n        Ma Bibliothèque\n      </Typography>\n      <Grid container spacing={3}>\n        {!libResources.message ? (\n          libResources.map((resource) => {\n            const date = new Date(resource.createdAt);\n\n            return (\n              <Grid item xs={12}>\n                <Card variant=\"outlined\">\n                  <CardHeader\n                    title={resource.title}\n                    subheader={`${resource.author.username} - ${moment(date).format('L')}`}\n                  />\n                  <CardContent>{resource.description}</CardContent>\n                  <CardActions style={{ justifyContent: \"flex-end\" }}>\n                    <IconButton aria-label=\"share\">\n                      <DeleteIcon\n                        onClick={() => {\n                          userlib.removeFromLibrary(resource.id);\n                          const getResource = async () => {\n                            const resourceFromServer = await fetchResource();\n                            setLibResources(resourceFromServer);\n                          };\n\n                          getResource();\n                        }}\n                      />\n                    </IconButton>\n                    <Button size=\"medium\" color=\"primary\">\n                      <Link\n                          key={resource.id}\n                          //to={{pathname: \"category/resource\", state: {id: resource.id}}}\n                          to={{\n                            pathname: \"resource\",\n                            state : {\n                              role : \"\"\n                            },\n                            hash: `${resource.id}̀̀`, //don't forget the backtick\n                          }}\n                      >\n                        Consulter\n                      </Link>\n                    </Button>\n                  </CardActions>\n                </Card>\n              </Grid>\n            );\n          })\n        ) : (\n          <Alert severity=\"info\">\n            <AlertTitle>Attention</AlertTitle>\n            Votre bibliothèque est vide\n          </Alert>\n        )}\n      </Grid>\n    </>\n  );\n}\n\nexport default UserLibrary;\n","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/Publication.js",["160","161","162","163","164","165","166"],"import React from 'react'\nimport { useState, useEffect } from 'react'\nimport { useForm } from \"react-hook-form\";\nimport auth from '../auth'\nimport { Link } from 'react-router-dom'\n\n// Material UI import \nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid'\nimport Box from '@material-ui/core/Box'\n// Material UI import for Form Select\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  formControl: {\n    margin: theme.spacing(3),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction Publication(props) {\n  const classes = useStyles();\n\n  const {\n    register,\n    handleSubmit,\n    formState,\n    errors,\n    setError,\n    watch,\n    control,\n  } = useForm();\n\n\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"auth_token\")) {\n      const getCategories = async () => {\n        const categoriesFromServer = await fetchCategories();\n        setCategories(categoriesFromServer);\n      };\n\n      getCategories();\n\n    }\n\n  }, []);\n\n  const fetchCategories = async () => {\n    const res = await fetch(`${global.api}/api/resources_category`, {\n      method: \"get\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${auth.getToken()}`,\n      },\n    });\n    return await res.json();\n  };\n\n  const onSubmit = (data) => {\n    let selectedCategories = [];\n    for (const [key, value] of Object.entries(data)) {\n      if(value === true) {\n        selectedCategories.push(key);\n      }\n    }\n\n    const payload = {\n      title: `${data.title}`,\n      description: `${data.description}`,\n      categories: selectedCategories,\n      type: \"text\"\n    }\n\n    fetch(`${global.api}/api/resources`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-type\": \"application/json\",\n        \"Authorization\" : `Bearer ${auth.accessToken}`\n      },\n      body: JSON.stringify(payload),\n    }).then(() => {\n      window.location.assign(\"http://localhost:3000/home\");\n    });\n  };\n\n  return (\n    <>\n      <Box my={5}>\n        <Typography component=\"h1\" variant=\"h4\">\n          Publier une nouvelle ressource\n        </Typography>\n      </Box>\n      <form\n        className={classes.form}\n        noValidate\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <Grid container spacing={2} justify=\"center\">\n          <Grid item xs={12}>\n            <TextField\n              id=\"title\"\n              name=\"title\"\n              label=\"Titre\"\n              placeholder=\"Titre\"\n              multiline\n              rowsMax={4}\n              variant=\"filled\"\n              inputRef={register}\n              fullWidth\n            />\n          </Grid>\n\n          <Grid item xs={6}>\n            <FormControl component=\"fieldset\" className={classes.formControl}>\n              <FormLabel component=\"legend\">\n                Choisissez une ou des catégories\n              </FormLabel>\n              <FormGroup>\n                {categories.map((category) => (\n                  <FormControlLabel\n                    control={\n                      <Checkbox name={category.name} inputRef={register} />\n                    }\n                    label={category.name}\n                  />\n                ))}\n              </FormGroup>\n            </FormControl>\n          </Grid>\n\n          <Grid item xs={12}>\n            <TextField\n              id=\"description\"\n              name=\"description\"\n              label=\"Description\"\n              multiline\n              rows={4}\n              variant=\"filled\"\n              inputRef={register}\n              fullWidth\n            />\n          </Grid>\n\n          <Box my={3}>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n            >\n              Publier\n            </Button>\n          </Box>\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nexport default Publication;\n\n// Title , Catégorie, Description, Type","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/ResRepList.js",[],"/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/UserRepList.js",[],"/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/CategTools.js",["167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182"],"import auth from \"../auth\";\nimport {Component, useEffect, useState} from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n    CardActions,\n    FormControl, FormControlLabel,\n    FormHelperText,\n    Input,\n    InputLabel,\n    List,\n    ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText,\n    ListSubheader, Switch\n} from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport {useForm} from \"react-hook-form\";\n\nconst stylesContainer = {\n    marginTop: '10%',\n}\n\nconst mt4 =  {\n    marginTop: '4%'\n}\n\nconst dFlexAround = {\n    display: 'flex',\n    justifyContent: 'space-around'\n}\n\nconst submitBtn = {\n    backgroundColor : 'blue',\n    borderColor : 'white',\n    borderRadius : '0%',\n    borderStyle : 'solid',\n    width : '10rem',\n    color : \"white\",\n\n}\n\n\n\n\nfunction CategTools() {\n\n\n    const addCategory = (e) => {\n        const {name} = e.target.elements\n        const playload = {\n            name : name.value\n        }\n        fetch(`${global.api}/api/admin/addCategory`,{\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-type\": \"application/json\",\n                Authorization: `Bearer ${auth.getToken()}`\n\n            },\n            body: JSON.stringify(playload),\n        }).then(() => {\n            console.log(playload)\n            //  window.location.href('window.location.assign(\"http://localhost:3000/categTools\");')\n        })\n    }\n\n    const displayBtn = {\n        textAlign: 'center',\n\n    }\n\n\n\n    const btnStyleDes = {\n        backgroundColor : 'green',\n\n        borderRadius : '0%',\n\n        width : '10rem',\n        color : \"white\",\n        boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n        fontWeight: \"500\",\n        lineHeight: \"1.75\",\n        letterSpacing: \"0.02857em\",\n\n\n\n    }\n\n    const btnStyleAct = {\n        backgroundColor : 'red',\n        borderRadius : '0%',\n\n        width : '10rem',\n        color : \"white\",\n        boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n        fontWeight: \"500\",\n        lineHeight: \"1.75\",\n        letterSpacing: \"0.02857em\",\n\n\n\n    }\n\n    const desactiveCateg = (idSe) =>{\n\n       // console.log(idSe.target.name)\n        const name = idSe.target.name\n\n       const playload = {\n           c : name\n       }\n       fetch(\n           `${global.api}/api/admin/delete_category`,{\n               method : 'POST',\n               headers: {\n                   Accept: \"application/json\",\n                   \"Content-type\": \"application/json\",\n                   Authorization: `Bearer ${auth.getToken()}`\n\n               },\n               body: JSON.stringify(playload),\n           }).then((res) => {\n\n        window.location.assign(\"http://localhost:3000/categTools\");\n       })\n    }\n\n    const activeCateg = (idSe) => {\n        const name = idSe.target.name\n\n        const playload = {\n            c : name\n        }\n        fetch(\n            `${global.api}/api/admin/active_category`,{\n                method : 'POST',\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-type\": \"application/json\",\n                    Authorization: `Bearer ${auth.getToken()}`\n\n                },\n                body: JSON.stringify(playload),\n            }).then((res) => {\n\n               window.location.assign(\"http://localhost:3000/categTools\");\n        })\n    }\n\n    const [categories, setCategories] = useState([])\n    useEffect(() => {\n        const getCategory = async () => {\n            const categoriesFromApi = await fetchCategories();\n            setCategories(categoriesFromApi);\n        };\n        getCategory();\n    }, [])\n    const fetchCategories = async () => {\n        const res = await fetch(`${global.api}/api/admin/resources_category`, {\n            method: 'GET',\n            headers: {\n                Accept: \"application/json\",\n                \"Content-type\": \"application/json\",\n                Authorization: `Bearer ${auth.getToken()}`,\n            },\n        });\n        return await res.json()\n    }\n    let status = \"\"\n    console.log(categories);\n    return (\n        <Container style={stylesContainer}>\n            <h1> Gestion des catégories</h1>\n            <h3 style={mt4}> Ajouter une catégories</h3>\n            <form  onSubmit={addCategory}>\n                <div style={dFlexAround}>\n                <Input name={'name'} type={'text'} placeholder={'Nom de la Catégorie'}/>\n                <Input style={submitBtn} type={\"submit\"} value={'ajouter'}/>\n                </div>\n            </form>\n            <div style={mt4}>\n                <h3> Supprimer, Activer des catégories </h3>\n                <List subheader={<ListSubheader>Liste des catégories</ListSubheader>}>\n                    {categories.map((c, i = 0) =>\n\n                    <ListItem>\n                        <ListItemText id=\"switch-list-label-wifi\" primary={c.name} />\n                        <ListItemSecondaryAction>\n\n                               {\n                                            (() => {\n                                                switch (c.status) {\n                                                    case true:   return <Input type={\"submit\"} onClick={(e) => desactiveCateg(e)} name={c.id}  style={btnStyleDes}  value={'DESACTIVER'}/>\n\n\n                                                    case false:      return <Input type={\"submit\"}  onClick={(e) => activeCateg(e)} name={c.id}  style={btnStyleAct} variant=\"contained\" color=\"primary\" href=\"#contained-buttons\" value={'ACTIVER'}/>\n\n                                                }\n                                            })()}\n\n\n                        </ListItemSecondaryAction>\n\n                    </ListItem>\n                     )}\n                </List>\n            </div>\n        </Container>\n\n\n    )\n}\nexport default CategTools;\n\n","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/Home.js",[],"/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/Register.js",["183","184","185","186","187","188","189","190","191","192","193","194"],"import React, { useState, useRef } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { Redirect } from \"react-router-dom\";\n//import { Container, Button, Form, FormGroup, Label, Input, FormText, Alert } from \"reactstrap\";\nimport \"./Register.css\";\n\n// Material UI Import\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\n\n// Material UI lab Imprt\nimport Alert from \"@material-ui/lab/Alert\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst Register = (props) => {\n  const classes = useStyles();\n\n  const {\n    register,\n    handleSubmit,\n    formState,\n    errors,\n    setError,\n    watch,\n    control,\n  } = useForm();\n  const { isSubmitting, isSubmitted, isSubmitSuccessful } = formState;\n\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n\n  const onSubmit = (data) => {\n    console.log(data);\n    const payload = {\n      username: `${data.username}`,\n      first_name: `${data.firstName}`,\n      last_name: `${data.lastName}`,\n      email: `${data.email}`,\n      password: `${data.password}`,\n      retyped_password: `${data.retyped_password}`,\n    };\n\n    fetch(`${global.api}/register`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    }).then(() => {\n      props.history.push(\"Login\");\n    });\n  };\n\n  console.log(errors);\n\n  return (\n    <>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign up\n          </Typography>\n          <form\n            className={classes.form}\n            noValidate\n            onSubmit={handleSubmit(onSubmit)}\n          >\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  autoComplete=\"fname\"\n                  name=\"firstName\"\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  id=\"firstName\"\n                  label=\"Prénom\"\n                  autoFocus\n                  inputRef={register({\n                    required: \"Entrez un prénom\",\n                    pattern: {\n                      value: /^([^0-9]*)$/,\n                      message: \"Les chiffes sont interdits\",\n                    },\n                  })}\n                />\n                {errors.firstName && (\n                  <Alert severity=\"warning\">{errors.firstName.message}</Alert>\n                )}\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  id=\"lastName\"\n                  label=\"Nom\"\n                  name=\"lastName\"\n                  autoComplete=\"lname\"\n                  inputRef={register({\n                    required: \"Entrez un nom\",\n                    pattern: {\n                      value: /^([^0-9]*)$/,\n                      message: \"Les chiffes sont interdits\",\n                    },\n                  })}\n                />\n                {errors.lastName && (\n                  <Alert severity=\"warning\">{errors.lastName.message}</Alert>\n                )}\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  id=\"username\"\n                  label=\"Nom Utilisateur\"\n                  name=\"username\"\n                  autoComplete=\"username\"\n                  inputRef={register({\n                    required: \"Vous devez entrez votre nom d'utilisateur\",\n                  })}\n                />\n                {errors.username && (\n                  <Alert severity=\"warning\">{errors.username.message}</Alert>\n                )}\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  id=\"email\"\n                  label=\"Email\"\n                  name=\"email\"\n                  autoComplete=\"email\"\n                  inputRef={register({\n                    required: \"Email obligatoire\",\n                    pattern: {\n                      value: /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/,\n                      message: \"Email invalide\",\n                    },\n                  })}\n                />\n                {errors.email && (\n                  <Alert severity=\"warning\">{errors.email.message}</Alert>\n                )}\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  name=\"password\"\n                  label=\"Mot de passe\"\n                  type=\"password\"\n                  id=\"password\"\n                  autoComplete=\"current-password\"\n                  inputRef={register({ required: \"Mot de passe obligatoire\" })}\n                />\n                {errors.password && (\n                  <Alert severity=\"warning\">{errors.password.message}</Alert>\n                )}\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  name=\"retyped_password\"\n                  label=\"Confirmation mot de passe\"\n                  type=\"password\"\n                  id=\"retyped_password\"\n                  autoComplete=\"current-password\"\n                  inputRef={register({\n                    required: \"Confirmez votre mot de passe\",\n                    validate: (value) =>\n                      value === password.current ||\n                      \"Les mots de passe ne correspondent pas\",\n                  })}\n                />\n                {errors.retyped_password && (\n                  <Alert severity=\"warning\">\n                    {errors.retyped_password.message}\n                  </Alert>\n                )}\n              </Grid>\n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n            >\n              Je m'inscris\n            </Button>\n            <Grid container justify=\"flex-end\">\n              <Grid item>\n                <Link href=\"/login\" variant=\"body2\">\n                  Déjà un compte ? Je me connecte\n                </Link>\n              </Grid>\n            </Grid>\n          </form>\n        </div>\n      </Container>\n    </>\n  );\n};\n\nexport default Register;\n","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/Category.js",["195","196"],"// This compenent contains the resources of ONE chosen category\n\nimport React from \"react\";\nimport auth from \"../auth\";\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport userlib from \"../userLibraryFunctions\";\nimport moment from 'moment';\nimport 'moment/locale/fr';\n\n\n// MaterialUI import\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\n// MaterialUI Icon Import\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport ReportIcon from \"@material-ui/icons/Report\";\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport Badge from '@material-ui/core/Badge';\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\nimport ReportProblemIcon from '@material-ui/icons/ReportProblem';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\n\n// MaterialUI Lab\n\nimport {Alert, AlertTitle} from \"@material-ui/lab\";\n\n\nfunction Category(props) {\n  // The category name is passed through the hash props in Categories.js\n  const categoryName = props.location.hash.substring(1);\n\n  const [resources, setResources] = useState([]);\n  const [libResources, setLibResources] = useState([]);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"auth_token\")) {\n      const getResources = async () => {\n        const resourcesFromServer = await fetchResources();\n        setResources(resourcesFromServer);\n      };\n\n      const getUserLibrary = async () => {\n        const resourcesFromServer = await fetchLibResources();\n        setLibResources(resourcesFromServer);\n      };\n\n      getResources();\n      getUserLibrary();\n    }\n  }, []);\n\n  // Fetch Resources\n  const fetchResources = async () => {\n    const res = await fetch(\n        `${global.api}/api/resources/category/${categoryName}^createdAt=ASC`,\n        {\n          method: \"get\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${auth.getToken()}`,\n          },\n        }\n    );\n    const data = await res.json();\n\n    return data;\n  };\n\n  // Fetch User's saved resources\n  const fetchLibResources = async () => {\n    const res = await fetch(`${global.api}/api/user/getLib`, {\n      method: \"post\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${auth.getToken()}`,\n      },\n    });\n    return await res.json();\n  };\n\n  // The condition check if the User has something in his library.\n  if (libResources.length > 0) {\n    resources.forEach((resource) => {\n      if(typeof resource !== \"string\"){\n        resource[\"inLibrary\"] = false;\n        for (let libResource of libResources) {\n          if (libResource.id === resource.id) {\n            resource[\"inLibrary\"] = true;\n            break;\n          }\n        }\n      }\n    });\n  }\n\n  let localStorageId = localStorage.idUser.substring(1, localStorage.idUser.length - 1);\n  // Loop and Conditional to check if a resource was already \"liked\" or not by the current user\n  for(let object of resources) {\n    if(typeof object !== \"string\"){\n      object[\"hasLiked\"] = false;\n      for(let prop of object.reactions) {\n        if(prop.user === localStorageId) {\n          object[\"hasLiked\"] = true;\n          break;\n        }\n      }\n    }\n  }\n\n  return (\n      <>\n        <Typography variant=\"h2\" component=\"h1\" style={{ margin: \"4% 0 4% 0\" }}>\n          Ressources pour : {categoryName}\n        </Typography>\n        <Grid container spacing={3}>\n          {typeof resources[0] !== \"string\" ? (\n              resources.map((resource) => {\n                if(resource.isBlocked !== true) {\n                  const date = new Date(resource.createdAt);\n\n                  return (\n                      <Grid item xs={12}>\n                        <Card variant=\"outlined\">\n                          <CardHeader\n                              title={resource.title}\n                              subheader={`${resource.author.username} - ${moment(date).format('L')}`}\n                          />\n                          <CardContent>{resource.description}</CardContent>\n                          <CardActions style={{ justifyContent: \"flex-end\" }}>\n                            <IconButton aria-label=\"add to favorites\">\n                              {resource.inLibrary === true ? (\n                                  <FavoriteIcon\n                                      color=\"primary\"\n                                      onClick={ async () => {\n                                        const removeFromLibrary = () => {\n                                          return new Promise((resolve,reject) => {\n                                            resolve(userlib.removeFromLibrary(resource.id))\n                                          })\n                                        }\n                                        const getResources = async () => {\n\n                                          const libResources = await fetchLibResources();\n                                          if (libResources.length > 0) {\n                                            setLibResources(libResources);\n                                          } else {\n                                            setLibResources([0]);\n                                          }\n                                        };\n                                        await removeFromLibrary();\n                                        await getResources();\n                                      }}\n                                  />\n                              ) : (\n                                  resource.author.id !== localStorageId ?\n                                      <FavoriteIcon\n                                          onClick={async () => {\n                                            const saveFavorite = () => {\n                                              return new Promise((resolve, reject) => {\n                                                resolve(userlib.saveInLibrary(resource.id))\n                                              })\n                                            }\n                                            const getResources = async () => {\n                                              const libResources = await fetchLibResources();\n                                              setLibResources(libResources);\n                                            };\n                                            await saveFavorite();\n                                            await getResources();\n                                          }}\n                                      />\n                                      :\n                                      <NotInterestedIcon/>\n                              )}\n                            </IconButton>\n                            <IconButton aria-label=\"like\">\n                              <Badge\n                                  badgeContent={resource.reactions.length}\n                                  color=\"primary\"\n                              >\n                                {resource.hasLiked ? (\n                                    <ThumbUpIcon\n                                        color=\"primary\"\n                                    />\n                                ) : (\n                                    <ThumbUpIcon\n                                        onClick={async () => {\n                                          const saveReaction = () => {\n                                            return new Promise((resolve,reject) => {\n                                              resolve(userlib.postReactionLike(resource.id));\n                                            })\n                                          }\n                                          const getResources = async () => {\n\n                                            const resources = await fetchResources();\n                                            setResources(resources);\n                                          };\n                                          await saveReaction();\n                                          await getResources();\n                                        }}\n                                    />\n                                )\n                                }\n                              </Badge>\n                            </IconButton>\n                            <IconButton aria-label=\"report\">\n                              <ReportIcon\n                                  onClick={() => {\n                                    userlib.reportResource(resource.id);\n                                    const getResources = async () => {\n                                      const resource = await fetchResources();\n                                      setResources(resource);\n                                    }\n\n                                    getResources();\n                                  }}\n                              />\n                            </IconButton>\n                            <IconButton>\n                              {resource.author.id !== localStorageId ?\n                                  <ReportProblemIcon\n                                      onClick={() => {\n                                        userlib.reportUser(resource.author.id);\n                                        const getResources = async () => {\n                                          const resource = await fetchResources();\n                                          setResources(resource);\n                                        }\n\n                                        getResources();\n                                      }}\n                                  />\n                                  :\n                                  <NotInterestedIcon/>\n                              }\n                            </IconButton>\n                            <IconButton aria-label=\"profile\">\n                              {/* <AccountCircleIcon>\n                        <Link\n                          key={resource.id}\n                          to={{\n                            pathname: \"profile\",\n                            state : {\n                              role : ''\n                            },\n                            hash: `${resource.author.id}`\n                          }}\n                        />\n                      </AccountCircleIcon> */}\n                              <Link\n                                  key={resource.id}\n                                  to={{\n                                    pathname: \"profile\",\n                                    state : {\n                                      role : ''\n                                    },\n                                    hash: `${resource.author.id}`\n                                  }}\n                              >\n                                <AccountCircleIcon/>\n                              </Link>\n                            </IconButton>\n                            <Button size=\"medium\" color=\"primary\">\n                              <Link\n                                  key={resource.id}\n                                  //to={{pathname: \"category/resource\", state: {id: resource.id}}}\n                                  to={{\n                                    pathname: \"resource\",\n                                    state : {\n                                      role : ''\n                                    },\n                                    hash: `${resource.id}`,\n                                  }}\n                              >\n                                Consulter\n                              </Link>\n                            </Button>\n                          </CardActions>\n                        </Card>\n                      </Grid>\n                  );\n                }\n\n              })\n          ) : (\n              <Alert severity=\"info\">\n                <AlertTitle>Attention</AlertTitle>\n                Cette catégorie n'a pas encore de ressource\n              </Alert>\n          )}\n        </Grid>\n      </>\n  );\n}\n\nexport default Category;","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/Resource.js",["197","198","199","200","201","202","203"],"// Component containing a chosen ressource\n\nimport React, {useEffect, useState} from \"react\";\nimport \"./Resource\";\nimport auth from \"../auth\";\nimport userlib from \"../userLibraryFunctions\";\nimport moment from 'moment';\nimport 'moment/locale/fr';\n// MaterialUI import\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\n// MaterialUI Icon Import\nimport ShareIcon from \"@material-ui/icons/Share\"\nimport {Input} from \"@material-ui/core\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\n\n// MaterialUI Icon Import\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport ReportIcon from \"@material-ui/icons/Report\";\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport Badge from '@material-ui/core/Badge';\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\nimport ReportProblemIcon from '@material-ui/icons/ReportProblem';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\n\n\n//const {id}  = props.location.state;\n\n\nfunction Resource(props) {\n  const id = props.location.hash.substring(1);\n\n  const [resource, setResource] = useState([]);\n  const [libResources, setLibResources] = useState([]);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"auth_token\")) {\n      const getResource = async () => {\n        const resourceFromServer = await fetchResource();\n        setResource(resourceFromServer);\n      };\n\n      const getUserLibrary = async () => {\n        const resourcesFromServer = await fetchLibResources();\n        setLibResources(resourcesFromServer);\n      };\n\n      getResource();\n      getUserLibrary();\n\n    }\n  }, []);\n\n  // Fetch One Ressource\n  const fetchResource = async () => {\n    const res = await fetch(`${global.api}/api/resources/${id}`, {\n      method: \"get\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${auth.getToken()}`,\n      },\n    });\n      return await res.json();\n  };\n\n  //Fetch User's saved resources\n  const fetchLibResources = async () => {\n    const res = await fetch(`${global.api}/api/user/getLib`, {\n      method: \"post\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${auth.getToken()}`,\n      },\n    });\n      return await res.json();\n  };\n\n\n\n\n    // Fetch One Ressource\n    if (props.location.state.role !== 'admin'){\n        //The condition check if the User has something in his library.\n        if (libResources.length > 0) {\n            resource.forEach((resource) => {\n                resource[\"inLibrary\"] = false;\n                for (let libResource of libResources) {\n                    if (libResource.id === resource.id) {\n                        resource[\"inLibrary\"] = true;\n                        break;\n                    }\n                }\n            });\n        }\n\n        let localStorageId = localStorage.idUser.substring(1, localStorage.idUser.length - 1);\n\n        // Checking if a resource was already \"liked\" or not\n        let hasLiked = false;\n        for(let object of resource) {\n            for(let prop of object.reactions) {\n                if(prop.user === localStorageId){\n                    hasLiked = true;\n                }\n            }\n        }\n\n        return (\n            <>\n                <Box my={3}>\n                    <Typography component=\"h1\" variant=\"h2\">\n                        {resource.map((resource) => {\n                            return (\n                                <Typography component=\"h2\" variant=\"h3\">\n                                    Resource : {resource.title}\n                                </Typography>\n                            );\n                        })}\n                    </Typography>\n                </Box>\n                {resource.map((resource) => {\n                    const date = new Date(resource.createdAt);\n\n                    return (\n                        <Card variant=\"outlined\">\n                            <CardHeader\n                                key={resource.id}\n                                title={resource.title}\n                                subheader={`${resource.author.username} - ${moment(date).format('L')}`}\n                            />\n                            <CardContent>{resource.description}</CardContent>\n                            <CardActions style={{ justifyContent: \"flex-end\" }}>\n                                <IconButton aria-label=\"add to favorites\">\n                                    {resource.inLibrary === true ? (\n                                        <FavoriteIcon\n                                            color=\"primary\"\n                                            onClick={async () => {\n                                                const removeFromLibrary = () => {\n                                                    return new Promise((resolve,reject) => {\n                                                        resolve(userlib.removeFromLibrary(resource.id))\n                                                    })\n                                                }\n                                                const getResources = async () => {\n                                                    const libResources = await fetchLibResources();\n                                                    if (libResources.length > 0) {\n                                                        setLibResources(libResources);\n                                                    } else {\n                                                        setLibResources([0]);\n                                                    }\n                                                };\n                                                await removeFromLibrary();\n                                                await getResources();\n                                            }}\n                                        />\n                                    ) : (\n                                        resource.author.id !== localStorageId ?\n                                            <FavoriteIcon\n                                                onClick={async () => {\n                                                    const saveFavorite = () => {\n                                                        return new Promise((resolve, reject) => {\n                                                            resolve(userlib.saveInLibrary(resource.id))\n                                                        })\n                                                    }\n                                                    const getResources = async () => {\n\n                                                        const libResources = await fetchLibResources();\n                                                        setLibResources(libResources);\n                                                    };\n                                                    await saveFavorite();\n                                                    await getResources();\n                                                }}\n                                            />\n                                            :\n                                            <NotInterestedIcon/>\n                                    )}\n                                </IconButton>\n                                <IconButton aria-label=\"like\">\n                                    <Badge badgeContent={resource.reactions.length} color=\"primary\">\n                                        {hasLiked ? (\n                                            <ThumbUpIcon\n                                                color=\"primary\"\n                                            />\n                                        ) : (\n                                            <ThumbUpIcon\n                                                onClick={async () => {\n                                                    const saveReaction = () => {\n                                                        return new Promise((resolve,reject) => {\n                                                            resolve(userlib.postReactionLike(resource.id));\n                                                        })\n                                                    }\n                                                    const getResources = async () => {\n                                                        const resource = await fetchResource();\n                                                        setResource(resource);\n                                                    };\n                                                    await saveReaction();\n                                                    await getResources();\n                                                }}\n                                            />\n                                        )}\n                                    </Badge>\n                                </IconButton>\n                                <IconButton aria-label=\"report\">\n                                    <ReportIcon\n                                        onClick={() => {\n                                            userlib.reportResource(resource.id);\n                                            const getResources = async () => {\n                                                const resource = await fetchResource();\n                                                setResource(resource);\n                                            }\n\n                                            getResources();\n                                        }}\n                                    />\n                                </IconButton>\n                                <IconButton>\n                                    {resource.author.id !== localStorageId ?\n                                        <ReportProblemIcon\n                                            onClick={() => {\n                                                userlib.reportUser(resource.author.id);\n                                                const getResources = async () => {\n                                                    const resource = await fetchResource();\n                                                    setResource(resource);\n                                                }\n\n                                                getResources();\n                                            }}\n                                        />\n                                        :\n                                        <NotInterestedIcon/>\n                                    }\n                                </IconButton>\n                            </CardActions>\n                        </Card>\n                    );\n                })}\n            </>\n        );\n     } else if (props.location.state.option === \"deblock\"){\n        const btnStyleDes = {\n            backgroundColor : 'green',\n\n            borderRadius : '0%',\n\n            width : '10rem',\n            color : \"white\",\n            boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n            fontWeight: \"500\",\n            lineHeight: \"1.75\",\n            letterSpacing: \"0.02857em\",\n\n\n\n        }\n\n        const cardBtn = {\n            display : \"flex\",\n            justifyContent : \"flex-end\",\n            marginBottom : '2rem',\n            marginRight : '1rem'\n        }\n\n        const deblockRes = (e) => {\n            console.log(e)\n            const name = e.target.name\n\n            const playload = {\n                r : name\n            }\n            fetch(\n                `${global.api}/api/admin/deblockRes`,{\n                    method : 'POST',\n                    headers: {\n                        Accept: \"application/json\",\n                        \"Content-type\": \"application/json\",\n                        Authorization: `Bearer ${auth.getToken()}`\n\n                    },\n                    body: JSON.stringify(playload),\n                }).then((res) => {\n\n                window.location.assign(\"http://localhost:3000/blockedRes\");\n            })\n        }\n        return (\n\n            <>\n                <h1>This is only ONE resource.</h1>\n                {resource.map((resource) => {\n                    // To format the Date to dd/mm/YYYY\n                    const date = new Date(resource.createdAt);\n                    const day = date.getDate();\n                    const month = (\"0\" + date.getMonth()).slice(-1) + 1;\n                    const year = date.getFullYear();\n                    return (\n                        <Card variant=\"outlined\">\n                            <CardHeader\n                                key={resource.id}\n                                title={resource.title}\n                                subheader={`${resource.author.username} - ${day}/${month}/${year}`}\n                            />\n                            <CardContent>{resource.description}</CardContent>\n                            <div style={cardBtn}>\n                                <Input type={\"submit\"} onClick={(e) => deblockRes(e)} name={resource.id}  style={btnStyleDes}  value={'DEBLOQUER'}/>\n                            </div>\n                        </Card>\n                    );\n                })}\n            </>\n        )\n\n\n    }\n\n    else {\n        const btnStyleBlock = {\n            backgroundColor : 'red',\n\n            borderRadius : '0%',\n\n            width : '10rem',\n            color : \"white\",\n            boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n            fontWeight: \"500\",\n            lineHeight: \"1.75\",\n            letterSpacing: \"0.02857em\",\n\n        }\n        const btnStyleClose = {\n            backgroundColor : '#FFB833',\n\n            borderRadius : '0%',\n\n            width : '10rem',\n            color : \"white\",\n            boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n            fontWeight: \"500\",\n            marginLeft : \"2rem\",\n            lineHeight: \"1.75\",\n            letterSpacing: \"0.02857em\",\n\n        }\n\n        const cardBtn = {\n            display : \"flex\",\n            justifyContent : \"flex-end\",\n            marginBottom : '2rem',\n            marginRight : '1rem'\n        }\n\n        const blockRes = (e) => {\n\n            const name = e.target.name\n\n            const playload = {\n                r : name\n\n            }\n            fetch(\n                `${global.api}/api/admin/closeandblockres`,{\n                    method : 'POST',\n                    headers: {\n                        Accept: \"application/json\",\n                        \"Content-type\": \"application/json\",\n                        Authorization: `Bearer ${auth.getToken()}`\n\n                    },\n                    body: JSON.stringify(playload),\n                }).then((res) => {\n\n                window.location.assign(\"http://localhost:3000/repResList\");\n            })\n        }\n\n        const closeReport = (e) => {\n\n            const name = e.target.name\n\n            const playload = {\n                r : name\n\n            }\n            fetch(\n                `${global.api}/api/admin/closeReport`,{\n                    method : 'POST',\n                    headers: {\n                        Accept: \"application/json\",\n                        \"Content-type\": \"application/json\",\n                        Authorization: `Bearer ${auth.getToken()}`\n\n                    },\n                    body: JSON.stringify(playload),\n                }).then((res) => {\n\n                window.location.assign(\"http://localhost:3000/repResList\");\n            })\n        }\n        return (\n            <>\n                <h1>This is only ONE resource.</h1>\n                {resource.map((resource) => {\n                    // To format the Date to dd/mm/YYYY\n                    const date = new Date(resource.createdAt);\n                    const day = date.getDate();\n                    const month = (\"0\" + date.getMonth()).slice(-1) + 1;\n                    const year = date.getFullYear();\n                    return (\n                        <Card variant=\"outlined\">\n                            <CardHeader\n                                key={resource.id}\n                                title={resource.title}\n                                subheader={`${resource.author.username} - ${day}/${month}/${year}`}\n                            />\n                            <CardContent>{resource.description}</CardContent>\n                            <div style={cardBtn}>\n\n                            </div>\n                            </Card>\n                    );\n                })}\n            </>\n        )\n    }\n\n\n\n\n}\n\nexport default Resource;\n","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/Profile.js",["204","205","206","207","208","209","210","211","212","213","214","215","216","217","218"],"import auth from \"../auth\";\nimport React, {useEffect, useState} from \"react\";\nimport {Container, Input, List, ListItem, Typography} from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport userlib from \"../userLibraryFunctions\";\nimport ShareIcon from \"@material-ui/icons/Share\";\nimport ReportIcon from \"@material-ui/icons/Report\";\nimport {Link} from \"react-router-dom\";\nimport Picture from '../assets/nopicture.png';\nimport Moment from \"moment\";\nimport Button from \"@material-ui/core/Button\";\n\n\n\nfunction Profile(props){\n    const picProfile = {\n        borderRadius : '100%',\n        backgroundColor : 'white',\n        height : '15rem',\n        width : '15rem',\n        marginRight : 'auto',\n        marginLeft : 'auto',\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop : \"3rem\"\n\n    }\n\n    const imgprofile = {\n        height : '9rem',\n            width : '9rem',\n    }\n\n    const jumbo = {\n        display : 'block',\n        justifyContent : 'center',\n        backgroundColor : 'grey',\n        paddingTop : '3rem',\n        paddingBottom : '3rem',\n    }\n    const centerText = {\n       textAlign : 'center'\n\n    }\n\n    const dFlexAround = {\n        display : 'flex',\n        justifyContent : 'space-around'\n    }\n\n    const id = props.location.hash.substring(1);\n    const [user, setUser] = useState([])\n    useEffect( () => {\n        const getUser = async () => {\n            const userFromApi = await fetchUser();\n            setUser(userFromApi)\n        };\n        getUser()\n    }, [])\n    const fetchUser = async () => {\n        const res = await fetch(\n            `${global.api}/api/user/${id}`, {\n                method : 'get',\n                headers : {\n                    Accept: \"application/json\",\n                    \"Content-type\": \"application/json\",\n                    Authorization: `Bearer ${auth.getToken()}`\n                }\n            }\n        )\n        return await res.json()\n    }\n    const [res, setRes] = useState([])\n    useEffect( () => {\n        const getRes = async () => {\n            const ResFromApi = await fetchRes();\n            setRes(ResFromApi)\n        };\n        getRes()\n    }, [])\n    const fetchRes = async () => {\n        const res = await fetch(\n            `${global.api}/api/resources/user/${id}`, {\n                method : 'get',\n                headers : {\n                    Accept: \"application/json\",\n                    \"Content-type\": \"application/json\",\n                    Authorization: `Bearer ${auth.getToken()}`\n                }\n            }\n        )\n        return await res.json()\n    }\n    const marginCard = {\n        marginTop : '1rem',\n        marginBottom : '1rem'\n    }\n\n    user.password = \"\";\n    const btnStyleBlock = {\n        backgroundColor : 'red',\n\n        borderRadius : '0%',\n\n        width : '10rem',\n        color : \"white\",\n        boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n        fontWeight: \"500\",\n        lineHeight: \"1.75\",\n        letterSpacing: \"0.02857em\",\n\n    }\n    const btnStyleClose = {\n        backgroundColor : '#FFB833',\n\n        borderRadius : '0%',\n\n        width : '10rem',\n        color : \"white\",\n        boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n        fontWeight: \"500\",\n        marginLeft : \"2rem\",\n        lineHeight: \"1.75\",\n        letterSpacing: \"0.02857em\",\n\n    }\n    const btnStyleWarn = {\n        backgroundColor : 'purple',\n\n        borderRadius : '0%',\n\n        width : '10rem',\n        color : \"white\",\n        boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n        fontWeight: \"500\",\n        marginLeft : \"2rem\",\n        lineHeight: \"1.75\",\n        letterSpacing: \"0.02857em\",\n\n    }\n    const btnStyleLink = {\n        backgroundColor : 'blue',\n        textAlign : 'center',\n        borderRadius : '0%',\n\n        width : '10rem',\n        color : \"white\",\n        boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n        fontWeight: \"500\",\n        lineHeight: \"1.75\",\n        letterSpacing: \"0.02857em\",\n        marginRight : \"2rem\",\n        marginLeft : \"2rem\",\n        height : '2rem',\n        paddingTop : '0.45rem'\n\n\n\n    }\n\n    const btnStyleDes = {\n        backgroundColor : 'green',\n\n        borderRadius : '0%',\n\n        width : '10rem',\n        color : \"white\",\n        boxShadow : \"0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\",\n        fontWeight: \"500\",\n        lineHeight: \"1.75\",\n        letterSpacing: \"0.02857em\",\n\n\n\n    }\n\n    const signalUser = (e) => {\n\n        const name = e.target.name\n\n        const playload = {\n            id : name\n        }\n        fetch(\n            `${global.api}/api/user/report_user`, {\n                method : 'POST',\n                header : {\n                    Accept: \"application/json\",\n                    \"Content-type\": \"application/json\",\n                    Authorization: `Bearer ${auth.getToken()}`\n                },\n                body : JSON.stringify(playload),\n        }\n        ).then((res) => {\n            window.location.assign(\"http://localhost:3000/warnList\")\n        })\n\n    }\n    const blockUser = (e) => {\n\n        const name = e.target.name\n\n        const playload = {\n            r : name\n        }\n        fetch(\n            `${global.api}/api/admin/closeAndBlockUser`,{\n                method : 'POST',\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-type\": \"application/json\",\n                    Authorization: `Bearer ${auth.getToken()}`\n\n                },\n                body: JSON.stringify(playload),\n            }).then((res) => {\n\n            window.location.assign(\"http://localhost:3000/repUserList\");\n        })\n    }\n\n    const closeReport = (e) => {\n\n        const name = e.target.name\n\n        const playload = {\n            r : name\n\n        }\n        fetch(\n            `${global.api}/api/admin/closeReport`,{\n                method : 'POST',\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-type\": \"application/json\",\n                    Authorization: `Bearer ${auth.getToken()}`\n\n                },\n                body: JSON.stringify(playload),\n            }).then((res) => {\n\n            window.location.assign(\"http://localhost:3000/repUserList\");\n        })\n    }\n\n    const warnUser = (e) => {\n        const name = e.target.name\n\n        const playload = {\n            r : name\n\n        }\n        fetch(\n            `${global.api}/api/admin/closeAndWarnUser`,{\n                method : 'POST',\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-type\": \"application/json\",\n                    Authorization: `Bearer ${auth.getToken()}`\n\n                },\n                body: JSON.stringify(playload),\n            }).then((res) => {\n\n            window.location.assign(\"http://localhost:3000/repUserList\");\n        })\n    }\n    let asset = \"\"\n\n    if (user.id !== undefined) {\n\n        if (user.profilePicture !== null) {\n\n            let profilePic = `${global.api}/asset/file/${user.profilePicture}`\n        }\n\n    }\n\n\n  //  console.log(user.profilePicture)\n\n    if (props.location.state.role !== 'admin') {\n        return (\n            <>\n                <Container style={jumbo}>\n                    <div style={picProfile}>\n                        <img style={imgprofile} src={user.profilePicture ? `${global.api}/asset/file/${user.profilePicture.id}` : Picture} />\n                    </div>\n                    <h3 style={centerText}> {user.username} </h3>\n                </Container>\n                <Container>\n                    <div style={dFlexAround}>\n                        <List>\n                            <ListItem>\n                                <Typography>\n                                    Ressources publiées : {res.length}\n                                </Typography>\n                            </ListItem>\n                            <Input name={user.id} type={\"submit\"} onClick={(e) => signalUser(e)} style={btnStyleBlock}  value={'Signaler'}/>\n\n\n                        </List>\n                    </div>\n                </Container>\n            {res.map((r) => {\n                // To format the Date to dd/mm/YYYY\n                return (\n                  <Card variant=\"outlined\">\n                    <CardHeader\n                      key={r.id}\n                      title={r.title}\n                      subheader={`${\n                        r.author.username\n                      } - date de publication: ${Moment(r.createdAt).format(\n                        \"L\"\n                      )}`}\n                    />\n                    <CardContent>{r.description}</CardContent>\n                    <CardActions style={{ justifyContent: \"flex-end\" }}>\n                      <Button size=\"medium\" color=\"primary\">\n                        <Link\n                          key={r.id}\n                          //to={{pathname: \"category/resource\", state: {id: resource.id}}}\n                          to={{\n                            pathname: \"resource\",\n                            state: {\n                              role: \"\",\n                            },\n                            hash: `${r.id}`,\n                          }}\n                        >\n                          Consulter\n                        </Link>\n                      </Button>\n                    </CardActions>\n                  </Card>\n                );\n            })}\n        </>\n    )} else if (props.location.state.option === \"deblock\"){\n        const deblockUser = (e) => {\n            const name = e.target.name\n\n            const playload = {\n                u : name\n            }\n            fetch(\n                `${global.api}/api/admin/deblockUser`,{\n                    method : 'POST',\n                    headers: {\n                        Accept: \"application/json\",\n                        \"Content-type\": \"application/json\",\n                        Authorization: `Bearer ${auth.getToken()}`\n\n                    },\n                    body: JSON.stringify(playload),\n                }).then((res) => {\n\n                window.location.assign(\"http://localhost:3000/blockedUser\");\n            })\n        }\n\n        return (\n            <>\n                <Container style={jumbo}>\n                    <div style={picProfile}>\n                        <img style={imgprofile} src={user.profilePicture ? `${global.api}/asset/file/${user.profilePicture.id}` : Picture} />\n                    </div>\n                    <h3 style={centerText}> {user.username} </h3>\n                </Container>\n                <Container>\n                    <div style={dFlexAround}>\n                    <List>\n                        <ListItem>\n                            <Typography>\n                                Ressources publiées : {res.length}\n                            </Typography>\n                        </ListItem>\n                        <Input type={\"submit\"} onClick={(e) => deblockUser(e)} name={user.id}  style={btnStyleDes}  value={'DEBLOQUER'}/>\n\n                    </List>\n                    </div>\n                </Container>\n                {res.map((r) => {\n                        const date = new Date(r.createdAt);\n                        const day = date.getDate();\n                        const month = (\"0\" + date.getMonth()).slice(-1) + 1;\n                        const year = date.getFullYear();\n                        const end = {\n                            display : 'flex',\n                            justifyContent : 'flex-end'\n                        }\n                        return (\n                            <Card style={marginCard} variant=\"outlined\">\n                                <CardHeader\n                                    key={r.id}\n                                    title={r.title}\n                                    subheader={`${day}/${month}/${year}`}\n                                />\n                                <CardContent>{r.description}</CardContent>\n                                <CardActions style={end}>\n                                    <Link\n                                        key={r.id}\n                                        //   params={{ role : \"admin\" }}\n                                        //to={{pathname: \"category/resource\", state: {id: resource.id}}}\n                                        to={{\n                                            pathname: \"resource\",\n                                            state: {\n                                                role: 'admin',\n\n                                                rep : r.id\n                                            },\n                                            hash: `${r.id}`,\n                                        }}\n                                    > VOIR </Link>\n                                </CardActions>\n                            </Card>\n                        )\n                    }\n                )}\n            </>\n        ) }\n     else {\n         console.log(user)\n\n        return (\n\n\n            <>\n            <Container style={jumbo}>\n                <div style={picProfile}>\n                    <img style={imgprofile} src={user.profilePicture ? `${global.api}/asset/file/${user.profilePicture.id}` : Picture} />\n                </div>\n                <h3 style={centerText}> {user.username} </h3>\n            </Container>\n                <Container>\n                    <div style={dFlexAround}>\n                        <List>\n                            <ListItem>\n                                <Typography>\n                                    Ressources publiées : {res.length}\n                                </Typography>\n                            </ListItem>\n                            <Input type={\"submit\"} onClick={(e) => blockUser(e)} name={props.location.state.rep}  style={btnStyleBlock}  value={'BLOQUER'}/>\n                            <Input type={\"submit\"} onClick={(e) => warnUser(e)} name={props.location.state.rep} style={btnStyleWarn}  value={'AVERTIR'}/>\n\n                        </List>\n                    </div>\n                </Container>\n                {res.map((r) => {\n                        const date = new Date(r.createdAt);\n                        const day = date.getDate();\n                        const month = (\"0\" + date.getMonth()).slice(-1) + 1;\n                        const year = date.getFullYear();\n                        const end = {\n                            display : 'flex',\n                            justifyContent : 'flex-end'\n                        }\n                        return (\n                        <Card style={marginCard} variant=\"outlined\">\n                            <CardHeader\n                                key={r.id}\n                                title={r.title}\n                                subheader={`${day}/${month}/${year}`}\n                            />\n                            <CardContent>{r.description}</CardContent>\n                            <CardActions style={end}>\n                                <Link\n                                      key={r.id}\n                                    //   params={{ role : \"admin\" }}\n                                    //to={{pathname: \"category/resource\", state: {id: resource.id}}}\n                                      to={{\n                                          pathname: \"resource\",\n                                          state: {\n                                              role: 'admin',\n                                              rep : r.id\n                                          },\n                                          hash: `${r.id}`,\n                                      }}\n                                > VOIR </Link>\n                            </CardActions>\n                        </Card>\n                        )\n                    }\n                )}\n            </>\n                ) }\n}\n\nexport default Profile","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/global.js",[],"/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/userLibraryFunctions.js",[],"/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/NavDrawer.js",["219","220","221"],"import React from 'react'\nimport { useState } from 'react'\nimport Drawer from '@material-ui/core/Drawer';\nimport auth from '../auth';\nimport { Link } from 'react-router-dom';\n\n// Material UI import\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\n// Import from MaterialUI\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { Divider } from '@material-ui/core';\n\nfunction NavDrawer() {\n    // MaterialUI logic\n    const useStyles = makeStyles((theme) => ({\n        root: {\n        flexGrow: 1,\n        },\n        menuButton: {\n        marginRight: theme.spacing(2),\n        },\n        title: {\n        flexGrow: 1,\n        },\n        menuIconContainer : {\n            marginLeft: 'auto',\n        },\n        paper: {\n          background: \"#009688\",\n        }\n    }));\n\n\n  const classes = useStyles();\n\n    const [openDrawer, setOpenDrawer] = useState(true);\n\n    return (\n      <>\n        <Drawer\n          anchor=\"left\"\n          onClose={() => setOpenDrawer(false)}\n          open={openDrawer}\n          classes={{ paper: classes.paper }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"space-between\",\n              backgroundColor: \"#009688\",\n            }}\n          >\n            <Typography\n              color=\"secondary\"\n              component={Link}\n              to=\"/home\"\n              variant=\"h6\"\n              className={classes.title}\n            >\n              Accueil\n            </Typography>\n            <Typography\n              color=\"secondary\"\n              component={Link}\n              to=\"/categories\"\n              variant=\"h6\"\n              className={classes.title}\n            >\n              Catégories\n            </Typography>\n            <Typography\n              color=\"secondary\"\n              component={Link}\n              to=\"/publication\"\n              variant=\"h6\"\n              className={classes.title}\n            >\n              Publier\n            </Typography>\n            <Typography\n              color=\"secondary\"\n              component={Link}\n              to=\"/userlibrary\"\n              variant=\"h6\"\n              className={classes.title}\n            >\n              Ma Bibliothèque\n            </Typography>\n            <Typography\n                color=\"secondary\"\n                component={Link}\n                to=\"/me\"\n                variant=\"h6\"\n                className={classes.title}\n              >\n                Mes ressources\n              </Typography>\n            <Button\n              color=\"inherit\"\n              onClick={() => {\n                auth.loggedout(() => {\n                  console.log(\"callback in test\");\n                  window.location.assign(\"http://localhost:3000/login\");\n                });\n              }}\n            >\n              Logout\n            </Button>\n          </div>\n        </Drawer>\n        <IconButton\n          className={classes.menuIconContainer}\n          onClick={() => setOpenDrawer(!openDrawer)}\n        >\n          <MenuIcon />\n        </IconButton>\n      </>\n    );\n}\n\nexport default NavDrawer\n","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/HomeCarousel.js",["222","223"],"import React from 'react'\n\n// Material UI import\nimport Paper from \"@material-ui/core/Paper\";\n\n// Material UI Carousel library import\nimport Carousel from \"react-material-ui-carousel\";\n\nfunction HomeCarousel(props) {\n\n    var items = [\n        {\n            name: \"Bienvenu sur Ressource Relationnelle\",\n            description: \"Une plateforme Citoyenne\",\n            image: \"images/logo_pc.jpg\"\n        },\n        {\n            name: \"Partagez des ressources\",\n            description: \"Renforcez la solidatrité autour de soi\",\n            image: \"images/logo_postit.jpg\"\n        },\n        {\n            name: \"En apprendre plus\",\n            description: \"Augmentez ses compétences\",\n            image: \"images/logo_meeting.jpg\"\n        }\n    ]\n\n    return (\n        <Carousel>\n            {\n                items.map( (item, i) => <Item key={i} item={item} /> )\n            }\n        </Carousel>\n    )\n}\n\n// This determines how the carousel will display\nfunction Item(props)\n{\n    return (\n        <Paper>\n            <div\n                style={{\n                    backgroundImage: \"url(\" + `${props.item.image}` + \")\",\n                    backgroundPosition: \"center\",\n                    backgroundSize: \"cover\",\n                    backgroundRepeat: \"no-repeat\",\n                    height: \"400px\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\"\n                }}\n            >\n            </div>\n        </Paper>\n    );\n}\n\nexport default HomeCarousel","/home/maxime/Bureau/cubes/RIL-Ressources/ressource_relationelle/src/components/AdminDash.js",["224","225","226"],"import Container  from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Container\";\nimport Card from \"@material-ui/core/Card\";\nimport Button from \"@material-ui/core/Button\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {CardActions, Divider} from \"@material-ui/core\";\n\n\nconst stylesContainer = {\n    marginTop: '10%',\n}\nconst dFlexAroundmt5 = {\n    display : 'flex',\n    justifyContent : 'space-around',\n    marginTop: '5%'\n}\n\nconst dFlexAround = {\n    display : 'flex',\n    justifyContent : 'space-around',\n}\n\nconst dFlexCenter = {\n    display : 'flex',\n    justifyContent : 'center'\n}\n\nconst btnStyle = {\n    backgroundColor : 'blue',\n    borderColor : 'white',\n    borderRadius : '0%',\n    borderStyle : 'solid',\n\n\n\n}\n\nconst displayBtn = {\n    textAlign: 'center',\n\n}\n\nconst mt5 = {\n    marginTop: '5%'\n}\n\nconst txtCenter = {\n    textAlign : 'center',\n}\n\nconst card = {\n    width : '41%',\n    height : '120px',\n}\n\nconst AdminDash = (props) => {\n    return (\n       <Container style={stylesContainer}>\n       <h1> Espace Adminsitration</h1>\n\n           <div style={dFlexAround}>\n               <Card style={card}>\n                   <CardContent>\n                   <Typography style={txtCenter} variant=\"p\" component=\"p\">\n                      Consultez les signalements des ressources\n                   </Typography>\n                       <div style={displayBtn}>\n                           <CardActions style={dFlexCenter}>\n\n                           <Button style={btnStyle} variant=\"contained\" color=\"primary\" href=\"/repResList\">\n                               Consulter\n                           </Button>\n\n                       </CardActions>\n                       </div>\n               </CardContent>\n               </Card>\n               <Card style={card}>\n                   <CardContent>\n                       <Typography style={txtCenter} variant=\"p\" component=\"p\">\n                           Consultez les ressources bloquées\n                       </Typography>\n                       <div style={displayBtn}>\n                       <CardActions style={dFlexCenter}>\n\n                           <Button style={btnStyle} variant=\"contained\" color=\"primary\" href=\"/blockedRes\">\n                               Consulter\n                           </Button>\n\n                       </CardActions>\n                       </div>\n                   </CardContent>\n               </Card>\n           </div>\n           <div style={dFlexAroundmt5}>\n               <Card style={card}>\n                   <CardContent>\n                       <Typography style={txtCenter} variant=\"p\" component=\"p\">\n                           Consultez les utilisateurs signalés\n                       </Typography>\n                       <div style={displayBtn}>\n                           <CardActions style={dFlexCenter}>\n\n                               <Button style={btnStyle} variant=\"contained\" color=\"primary\" href=\"/repUserList\">\n                                   Consulter\n                               </Button>\n\n                           </CardActions>\n                       </div>\n                   </CardContent>\n               </Card>\n               <Card style={card}>\n                   <CardContent>\n                       <Typography style={txtCenter} variant=\"p\" component=\"p\">\n                           Consultez les utilisateurs bloqués\n                       </Typography>\n                       <div style={displayBtn}>\n                           <CardActions style={dFlexCenter}>\n\n                               <Button style={btnStyle} variant=\"contained\" color=\"primary\" href=\"/blockedUser\">\n                                   Consulter\n                               </Button>\n\n                           </CardActions>\n                       </div>\n                   </CardContent>\n               </Card>\n           </div>\n           <div style= {dFlexAroundmt5}>\n               <Card style={card}>\n                   <CardContent>\n                       <Typography style={txtCenter} variant=\"p\" component=\"p\">\n                           Consultez les Avertissements\n                       </Typography>\n                       <div style={displayBtn}>\n                           <CardActions style={dFlexCenter}>\n\n                               <Button style={btnStyle} variant=\"contained\" color=\"primary\" href=\"/warnList\">\n                                   Consulter\n                               </Button>\n\n                           </CardActions>\n                       </div>\n                   </CardContent>\n               </Card>\n               <Card style={card}>\n                   <CardContent>\n                       <Typography style={txtCenter} variant=\"p\" component=\"p\">\n                           Gestion des catégories\n                       </Typography>\n                       <div style={displayBtn}>\n                           <CardActions style={dFlexCenter}>\n\n                               <Button style={btnStyle} variant=\"contained\" color=\"primary\" href=\"/categTools\">\n                                   Consulter\n                               </Button>\n\n                           </CardActions>\n                       </div>\n                   </CardContent>\n               </Card>\n           </div>\n       </Container>\n    )\n}\n\nexport default AdminDash",{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","severity":1,"message":"232","line":202,"column":10,"nodeType":"233","messageId":"234","endLine":202,"endColumn":18},{"ruleId":"231","severity":1,"message":"235","line":9,"column":13,"nodeType":"233","messageId":"234","endLine":9,"endColumn":25},{"ruleId":"231","severity":1,"message":"236","line":99,"column":11,"nodeType":"233","messageId":"234","endLine":99,"endColumn":19},{"ruleId":"231","severity":1,"message":"237","line":3,"column":27,"nodeType":"233","messageId":"234","endLine":3,"endColumn":31},{"ruleId":"231","severity":1,"message":"238","line":3,"column":33,"nodeType":"233","messageId":"234","endLine":3,"endColumn":41},{"ruleId":"231","severity":1,"message":"239","line":3,"column":43,"nodeType":"233","messageId":"234","endLine":3,"endColumn":55},{"ruleId":"231","severity":1,"message":"240","line":3,"column":57,"nodeType":"233","messageId":"234","endLine":3,"endColumn":70},{"ruleId":"231","severity":1,"message":"241","line":8,"column":8,"nodeType":"233","messageId":"234","endLine":8,"endColumn":18},{"ruleId":"231","severity":1,"message":"242","line":9,"column":8,"nodeType":"233","messageId":"234","endLine":9,"endColumn":20},{"ruleId":"231","severity":1,"message":"243","line":10,"column":8,"nodeType":"233","messageId":"234","endLine":10,"endColumn":15},{"ruleId":"231","severity":1,"message":"244","line":11,"column":8,"nodeType":"233","messageId":"234","endLine":11,"endColumn":17},{"ruleId":"231","severity":1,"message":"245","line":12,"column":8,"nodeType":"233","messageId":"234","endLine":12,"endColumn":18},{"ruleId":"231","severity":1,"message":"246","line":14,"column":9,"nodeType":"233","messageId":"234","endLine":14,"endColumn":13},{"ruleId":"231","severity":1,"message":"247","line":15,"column":8,"nodeType":"233","messageId":"234","endLine":15,"endColumn":15},{"ruleId":"231","severity":1,"message":"246","line":5,"column":9,"nodeType":"233","messageId":"234","endLine":5,"endColumn":13},{"ruleId":"231","severity":1,"message":"248","line":7,"column":8,"nodeType":"233","messageId":"234","endLine":7,"endColumn":19},{"ruleId":"231","severity":1,"message":"249","line":41,"column":11,"nodeType":"233","messageId":"234","endLine":41,"endColumn":24},{"ruleId":"231","severity":1,"message":"250","line":55,"column":11,"nodeType":"233","messageId":"234","endLine":55,"endColumn":23},{"ruleId":"231","severity":1,"message":"251","line":1,"column":16,"nodeType":"233","messageId":"234","endLine":1,"endColumn":25},{"ruleId":"231","severity":1,"message":"252","line":1,"column":27,"nodeType":"233","messageId":"234","endLine":1,"endColumn":35},{"ruleId":"231","severity":1,"message":"253","line":5,"column":9,"nodeType":"233","messageId":"234","endLine":5,"endColumn":16},{"ruleId":"231","severity":1,"message":"254","line":17,"column":9,"nodeType":"233","messageId":"234","endLine":17,"endColumn":17},{"ruleId":"231","severity":1,"message":"255","line":9,"column":11,"nodeType":"233","messageId":"234","endLine":9,"endColumn":24},{"ruleId":"231","severity":1,"message":"249","line":22,"column":11,"nodeType":"233","messageId":"234","endLine":22,"endColumn":24},{"ruleId":"231","severity":1,"message":"256","line":36,"column":11,"nodeType":"233","messageId":"234","endLine":36,"endColumn":23},{"ruleId":"231","severity":1,"message":"257","line":2,"column":22,"nodeType":"233","messageId":"234","endLine":2,"endColumn":30},{"ruleId":"231","severity":1,"message":"253","line":6,"column":9,"nodeType":"233","messageId":"234","endLine":6,"endColumn":16},{"ruleId":"231","severity":1,"message":"258","line":9,"column":8,"nodeType":"233","messageId":"234","endLine":9,"endColumn":14},{"ruleId":"231","severity":1,"message":"259","line":11,"column":8,"nodeType":"233","messageId":"234","endLine":11,"endColumn":19},{"ruleId":"231","severity":1,"message":"246","line":13,"column":8,"nodeType":"233","messageId":"234","endLine":13,"endColumn":12},{"ruleId":"231","severity":1,"message":"260","line":16,"column":10,"nodeType":"233","messageId":"234","endLine":16,"endColumn":20},{"ruleId":"231","severity":1,"message":"261","line":21,"column":8,"nodeType":"233","messageId":"234","endLine":21,"endColumn":13},{"ruleId":"231","severity":1,"message":"242","line":20,"column":8,"nodeType":"233","messageId":"234","endLine":20,"endColumn":20},{"ruleId":"231","severity":1,"message":"244","line":21,"column":8,"nodeType":"233","messageId":"234","endLine":21,"endColumn":17},{"ruleId":"231","severity":1,"message":"245","line":22,"column":8,"nodeType":"233","messageId":"234","endLine":22,"endColumn":18},{"ruleId":"231","severity":1,"message":"246","line":5,"column":10,"nodeType":"233","messageId":"234","endLine":5,"endColumn":14},{"ruleId":"231","severity":1,"message":"262","line":15,"column":8,"nodeType":"233","messageId":"234","endLine":15,"endColumn":22},{"ruleId":"231","severity":1,"message":"263","line":45,"column":5,"nodeType":"233","messageId":"234","endLine":45,"endColumn":14},{"ruleId":"231","severity":1,"message":"264","line":46,"column":5,"nodeType":"233","messageId":"234","endLine":46,"endColumn":11},{"ruleId":"231","severity":1,"message":"265","line":47,"column":5,"nodeType":"233","messageId":"234","endLine":47,"endColumn":13},{"ruleId":"231","severity":1,"message":"266","line":48,"column":5,"nodeType":"233","messageId":"234","endLine":48,"endColumn":10},{"ruleId":"231","severity":1,"message":"267","line":49,"column":5,"nodeType":"233","messageId":"234","endLine":49,"endColumn":12},{"ruleId":"231","severity":1,"message":"268","line":2,"column":9,"nodeType":"233","messageId":"234","endLine":2,"endColumn":18},{"ruleId":"231","severity":1,"message":"269","line":4,"column":8,"nodeType":"233","messageId":"234","endLine":4,"endColumn":12},{"ruleId":"231","severity":1,"message":"270","line":5,"column":8,"nodeType":"233","messageId":"234","endLine":5,"endColumn":19},{"ruleId":"231","severity":1,"message":"271","line":6,"column":8,"nodeType":"233","messageId":"234","endLine":6,"endColumn":18},{"ruleId":"231","severity":1,"message":"248","line":8,"column":5,"nodeType":"233","messageId":"234","endLine":8,"endColumn":16},{"ruleId":"231","severity":1,"message":"272","line":9,"column":5,"nodeType":"233","messageId":"234","endLine":9,"endColumn":16},{"ruleId":"231","severity":1,"message":"273","line":9,"column":18,"nodeType":"233","messageId":"234","endLine":9,"endColumn":34},{"ruleId":"231","severity":1,"message":"262","line":10,"column":5,"nodeType":"233","messageId":"234","endLine":10,"endColumn":19},{"ruleId":"231","severity":1,"message":"274","line":12,"column":5,"nodeType":"233","messageId":"234","endLine":12,"endColumn":15},{"ruleId":"231","severity":1,"message":"275","line":14,"column":15,"nodeType":"233","messageId":"234","endLine":14,"endColumn":27},{"ruleId":"231","severity":1,"message":"276","line":15,"column":20,"nodeType":"233","messageId":"234","endLine":15,"endColumn":26},{"ruleId":"231","severity":1,"message":"277","line":17,"column":8,"nodeType":"233","messageId":"234","endLine":17,"endColumn":14},{"ruleId":"231","severity":1,"message":"278","line":18,"column":9,"nodeType":"233","messageId":"234","endLine":18,"endColumn":16},{"ruleId":"231","severity":1,"message":"279","line":69,"column":11,"nodeType":"233","messageId":"234","endLine":69,"endColumn":21},{"ruleId":"231","severity":1,"message":"280","line":172,"column":9,"nodeType":"233","messageId":"234","endLine":172,"endColumn":15},{"ruleId":"281","severity":1,"message":"282","line":195,"column":49,"nodeType":"283","messageId":"284","endLine":201,"endColumn":50},{"ruleId":"231","severity":1,"message":"252","line":1,"column":17,"nodeType":"233","messageId":"234","endLine":1,"endColumn":25},{"ruleId":"231","severity":1,"message":"285","line":2,"column":19,"nodeType":"233","messageId":"234","endLine":2,"endColumn":29},{"ruleId":"231","severity":1,"message":"257","line":3,"column":10,"nodeType":"233","messageId":"234","endLine":3,"endColumn":18},{"ruleId":"231","severity":1,"message":"273","line":12,"column":8,"nodeType":"233","messageId":"234","endLine":12,"endColumn":24},{"ruleId":"231","severity":1,"message":"286","line":13,"column":8,"nodeType":"233","messageId":"234","endLine":13,"endColumn":16},{"ruleId":"231","severity":1,"message":"287","line":16,"column":8,"nodeType":"233","messageId":"234","endLine":16,"endColumn":11},{"ruleId":"231","severity":1,"message":"265","line":53,"column":5,"nodeType":"233","messageId":"234","endLine":53,"endColumn":13},{"ruleId":"231","severity":1,"message":"267","line":55,"column":5,"nodeType":"233","messageId":"234","endLine":55,"endColumn":12},{"ruleId":"231","severity":1,"message":"288","line":57,"column":11,"nodeType":"233","messageId":"234","endLine":57,"endColumn":23},{"ruleId":"231","severity":1,"message":"289","line":57,"column":25,"nodeType":"233","messageId":"234","endLine":57,"endColumn":36},{"ruleId":"231","severity":1,"message":"290","line":57,"column":38,"nodeType":"233","messageId":"234","endLine":57,"endColumn":56},{"ruleId":"291","severity":1,"message":"292","line":176,"column":36,"nodeType":"293","messageId":"294","endLine":176,"endColumn":37,"suggestions":"295"},{"ruleId":"296","severity":1,"message":"297","line":58,"column":6,"nodeType":"298","endLine":58,"endColumn":8,"suggestions":"299"},{"ruleId":"300","severity":1,"message":"301","line":127,"column":40,"nodeType":"302","messageId":"303","endLine":127,"endColumn":42},{"ruleId":"231","severity":1,"message":"244","line":14,"column":8,"nodeType":"233","messageId":"234","endLine":14,"endColumn":17},{"ruleId":"231","severity":1,"message":"304","line":28,"column":8,"nodeType":"233","messageId":"234","endLine":28,"endColumn":25},{"ruleId":"296","severity":1,"message":"305","line":56,"column":6,"nodeType":"298","endLine":56,"endColumn":8,"suggestions":"306"},{"ruleId":"231","severity":1,"message":"255","line":321,"column":15,"nodeType":"233","messageId":"234","endLine":321,"endColumn":28},{"ruleId":"231","severity":1,"message":"249","line":334,"column":15,"nodeType":"233","messageId":"234","endLine":334,"endColumn":28},{"ruleId":"231","severity":1,"message":"307","line":356,"column":15,"nodeType":"233","messageId":"234","endLine":356,"endColumn":23},{"ruleId":"231","severity":1,"message":"308","line":380,"column":15,"nodeType":"233","messageId":"234","endLine":380,"endColumn":26},{"ruleId":"231","severity":1,"message":"241","line":8,"column":8,"nodeType":"233","messageId":"234","endLine":8,"endColumn":18},{"ruleId":"231","severity":1,"message":"242","line":9,"column":8,"nodeType":"233","messageId":"234","endLine":9,"endColumn":20},{"ruleId":"231","severity":1,"message":"243","line":10,"column":8,"nodeType":"233","messageId":"234","endLine":10,"endColumn":15},{"ruleId":"231","severity":1,"message":"244","line":11,"column":8,"nodeType":"233","messageId":"234","endLine":11,"endColumn":17},{"ruleId":"231","severity":1,"message":"245","line":12,"column":8,"nodeType":"233","messageId":"234","endLine":12,"endColumn":18},{"ruleId":"296","severity":1,"message":"309","line":64,"column":8,"nodeType":"298","endLine":64,"endColumn":10,"suggestions":"310"},{"ruleId":"296","severity":1,"message":"311","line":85,"column":8,"nodeType":"298","endLine":85,"endColumn":10,"suggestions":"312"},{"ruleId":"231","severity":1,"message":"249","line":118,"column":11,"nodeType":"233","messageId":"234","endLine":118,"endColumn":24},{"ruleId":"231","severity":1,"message":"250","line":146,"column":11,"nodeType":"233","messageId":"234","endLine":146,"endColumn":23},{"ruleId":"231","severity":1,"message":"308","line":227,"column":11,"nodeType":"233","messageId":"234","endLine":227,"endColumn":22},{"ruleId":"231","severity":1,"message":"313","line":273,"column":9,"nodeType":"233","messageId":"234","endLine":273,"endColumn":14},{"ruleId":"231","severity":1,"message":"314","line":279,"column":17,"nodeType":"233","messageId":"234","endLine":279,"endColumn":27},{"ruleId":"315","severity":1,"message":"316","line":292,"column":25,"nodeType":"317","endLine":292,"endColumn":142},{"ruleId":"315","severity":1,"message":"316","line":372,"column":25,"nodeType":"317","endLine":372,"endColumn":142},{"ruleId":"315","severity":1,"message":"316","line":437,"column":21,"nodeType":"317","endLine":437,"endColumn":138},{"ruleId":"231","severity":1,"message":"318","line":13,"column":8,"nodeType":"233","messageId":"234","endLine":13,"endColumn":14},{"ruleId":"231","severity":1,"message":"319","line":14,"column":8,"nodeType":"233","messageId":"234","endLine":14,"endColumn":15},{"ruleId":"231","severity":1,"message":"320","line":17,"column":10,"nodeType":"233","messageId":"234","endLine":17,"endColumn":17},{"ruleId":"321","severity":1,"message":"322","line":45,"column":45,"nodeType":"323","messageId":"324","endLine":45,"endColumn":46},{"ruleId":"321","severity":1,"message":"322","line":45,"column":69,"nodeType":"323","messageId":"324","endLine":45,"endColumn":70},{"ruleId":"231","severity":1,"message":"287","line":2,"column":8,"nodeType":"233","messageId":"234","endLine":2,"endColumn":11},{"ruleId":"231","severity":1,"message":"320","line":7,"column":22,"nodeType":"233","messageId":"234","endLine":7,"endColumn":29},{"ruleId":"231","severity":1,"message":"325","line":44,"column":7,"nodeType":"233","messageId":"234","endLine":44,"endColumn":10},"no-native-reassign",["326"],"no-negated-in-lhs",["327"],"no-unused-vars","'NotFound' is defined but never used.","Identifier","unusedVar","'decodedToken' is assigned a value but never used.","'dContent' is assigned a value but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'ListSubheader' is defined but never used.","'IconButton' is defined but never used.","'FavoriteIcon' is defined but never used.","'userlib' is defined but never used.","'ShareIcon' is defined but never used.","'ReportIcon' is defined but never used.","'Link' is defined but never used.","'Picture' is defined but never used.","'CardActions' is defined but never used.","'btnStyleClose' is assigned a value but never used.","'btnStyleLink' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'getRole' is defined but never used.","'getRoles' is defined but never used.","'btnStyleBlock' is assigned a value but never used.","'btnStyleWarn' is assigned a value but never used.","'Redirect' is defined but never used.","'Avatar' is defined but never used.","'CssBaseline' is defined but never used.","'makeStyles' is defined but never used.","'Alert' is defined but never used.","'FormHelperText' is defined but never used.","'formState' is assigned a value but never used.","'errors' is assigned a value but never used.","'setError' is assigned a value but never used.","'watch' is assigned a value but never used.","'control' is assigned a value but never used.","'Component' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'Typography' is defined but never used.","'FormControl' is defined but never used.","'FormControlLabel' is defined but never used.","'InputLabel' is defined but never used.","'ListItemIcon' is defined but never used.","'Switch' is defined but never used.","'Button' is defined but never used.","'useForm' is defined but never used.","'displayBtn' is assigned a value but never used.","'status' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Controller' is defined but never used.","'Checkbox' is defined but never used.","'Box' is defined but never used.","'isSubmitting' is assigned a value but never used.","'isSubmitted' is assigned a value but never used.","'isSubmitSuccessful' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["328","329"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchResources'. Either include it or remove the dependency array.","ArrayExpression",["330"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'AccountCircleIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchResource'. Either include it or remove the dependency array.",["331"],"'blockRes' is assigned a value but never used.","'closeReport' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchUser'. Either include it or remove the dependency array.",["332"],"React Hook useEffect has a missing dependency: 'fetchRes'. Either include it or remove the dependency array.",["333"],"'asset' is assigned a value but never used.","'profilePic' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Divider' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'mt5' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"334","fix":"335","desc":"336"},{"messageId":"337","fix":"338","desc":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},"removeEscape",{"range":"348","text":"349"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"350","text":"351"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [fetchResources]",{"range":"352","text":"353"},"Update the dependencies array to be: [fetchResource]",{"range":"354","text":"355"},"Update the dependencies array to be: [fetchUser]",{"range":"356","text":"357"},"Update the dependencies array to be: [fetchRes]",{"range":"358","text":"359"},[5467,5468],"",[5467,5467],"\\",[1954,1956],"[fetchResources]",[1834,1836],"[fetchResource]",[1815,1817],"[fetchUser]",[2455,2457],"[fetchRes]"]